server:
  port: 3366

spring:
  application:
    name: config-client
  cloud:
    # config客户端配置
    config:
      label: master #分支名称
      name: config  #配置文件名称
      profile: dev  #读取后缀名称 上述三个综合：master分支上的config-dev.yml的配置文件被读取 http://localhost:3344/master/config-dev.yml
      uri: http://localhost:3344  #配置中心地址
  # rabbitMQ相关配置
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest


eureka:
  client:
    # 表示是否将自己注册进eureka server 默认为true
    register-with-eureka: true
    # 表示是否从eureka server 抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡
    fetch-registry: true
    service-url:
      #defaultZone: http://localhost:7001/eureka
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka #集群版
  instance:
    instance-id: configClient3366
    prefer-ip-address: true #访问路径可以显示IP地址
    # eureka客服端向服务端发送心跳的时间间隔，单位为秒（默认30秒）
    lease-renewal-interval-in-seconds: 30

#动态刷新
#暴露监控端点
management:
  endpoints:
    web:
      exposure:
        include: "*"













# applicaiton.yml是用户级的资源配置项
# bootstrap.ym1是系统级的，优先级更加高
# Spring Cloud会创建一个“Bootstrap Context”，作为Spring应用的Application Context的父上下文。初始化的时候，BootstrapContext负责从外部源加载配属性并解析配置。这两个上下文共享一个从外部获取的Environment。
# Bootstrap 属性有高优先级，默认情况下，它们不会被本地配置看盖。Bootstrap context和Application Context有着不同的约定所以新增了一个bootstrap.yml文件，保证 Bootstrap Context和Application Context 配置的分离。
# 要将Client模块下的application.yml文件改为bootstrap.yml,这是很关键的，因为bootstrap.yml是比application.yml先加载的。bootstrapyml优先级高于application.yml




